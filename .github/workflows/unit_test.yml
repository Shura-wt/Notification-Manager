name: Unit Test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 22.11.0
        id: test
        uses: actions/setup-node@v4
        with:
          node-version: '22.11.0'
          cache: 'npm'
      - run: npm ci
      - run: npm run build --if-present
      - run: npm run test:report


      - name: Comment coverage on PR
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const coverageReport = process.env.COVERAGE_REPORT;
            const failedTests = process.env.FAILED_TESTS || "";
            const thresholds = process.env.COVERAGE_THRESHOLDS || "";
            const prNumber = context.payload.pull_request.number;
            
            // Find existing comments by this bot to avoid duplication
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });
            
            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.startsWith('## Jest Report')
            );
            
            let body = `## Jest Report\n`;
            body += "```" + coverageReport + "\n```\n";
            
            if (failedTests && !failedTests.includes("None")) {
              body += `### ❌ Failed Tests\n${failedTests}\n`;
            }
            
            if (thresholds && !thresholds.includes("None")) {
              body += `### ⚠ Coverage Thresholds Not Met\n${thresholds}\n`;
            }
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body
              });
            }
